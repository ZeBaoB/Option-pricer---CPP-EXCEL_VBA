Function VanillaOptionPricer(contract_type As String, _
                            exercise_type As String, _
                            maturity As Double, _
                            strike As Double, _
                            computation_date As String, _
                            time_mesh_params As Long, _
                            spot_mesh_params As Long, _
                            s0 As Double, _
                            returnTable As Range, _
                            sigma As Double) As Double
    
    'Change the return table in 2 array time_steps and return_value
    Dim time_step() As Double
    Dim r_value() As Double
    Dim lengthStepArray As Integer
    lengthStepArray = lengthReturnTable(returnTable, maturity)
    time_step = GetSteps(returnTable, lengthStepArray)
    r_value = GetReturnsValue(returnTable, lengthStepArray)
    
    Dim isCall As Boolean
    Dim isEuropean As Boolean
    
    If contract_type = "Call" Then
        isCall = True
    Else
        isCall = False
    End If
    
    If exercise_type = "European" Then
        isEuropean = True
    Else
        isEuropean = False
    End If
    
    ' Computation of optionPrice, Delta, Gamma, Theta, Rho, Vega----------------------------------
    'They will be stored in the array result and the imprecision in the array error
    Dim result(1 To 6) As Double
    Dim error(1 To 6) As Double
    Dim underlying(1 To spot_mesh_params) As Double
    Dim option_price(1 To spot_mesh_params) As Double
    Dim delta(1 To 150) As Double
    Dim ExcerciceBoundary(1 To 150) As Double
    
    'computing result
    VanillaOptionPricer = computePriceAndPartialDerivates(result(1), error(1), underlying(1), option_price(1), delta(1), ExcerciceBoundary(1), isCall, isEuropean, maturity, strike, time_mesh_params, spot_mesh_params, s0, time_step(1), r_value(1), lengthStepArray, sigma)
    VanillaOptionPricer = result(1)
End Function

Function lengthReturnTable(rng As Range, maxval As Double) As Integer
    Dim i As Integer
    Dim lengthStepArray As Integer
    
    lengthStepArray = 0
    'find the length of table
    For i = 1 To rng.Columns.Count
        If rng.Cells(1, i).Value >= maxval Then
            lengthStepArray = i
            Exit For
        End If
    Next i
    lengthReturnTable = lengthStepArray
End Function

Function GetSteps(rng As Range, T0 As Long) As Variant
    Dim stepArray() As Double
    Dim i As Integer
    Dim currentValue As Double
    
    ' Initialize the array to hold step values
    ReDim stepArray(1 To rng.Columns.Count)
    
    ' Populate the array and check for ordering
    currentValue = -1#
    For i = 1 To rng.Columns.Count
        stepArray(i) = (Int(CDbl(rng.Cells(1, i).Value)) - T0) / 365
        If stepArray(i) <= currentValue Then
            GetSteps = CVErr(xlErrValue)  ' Return an error if the values are not in strickly ascending order
            Exit Function
        End If
        currentValue = stepArray(i)
    Next i
    
    ' Return the array if all checks are passed
    GetSteps = stepArray
End Function

Function GetReturnsValue(rng As Range) As Variant
    Dim returnsArray() As Double
    Dim i As Integer
    
    ' Check if the range contains exactly 2 rows
    If rng.Rows.Count <> 2 Then
        GetReturnsValue = CVErr(xlErrRef)
        Exit Function
    End If
        
    ' Initialize the array to hold step values
    ReDim returnsArray(1 To rng.Columns.Count)
    
    ' Populate the array
    For i = 1 To rng.Columns.Count
        returnsArray(i) = rng.Cells(2, i).Value
    Next i
    
    ' Return the array if all checks are passed
    GetReturnsValue = returnsArray
End Function
